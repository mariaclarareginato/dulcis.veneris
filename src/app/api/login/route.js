import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";

const prisma = new PrismaClient();

export async function POST(req) {
Â  try {
Â  Â  const { email, senha } = await req.json();
Â  Â  const usuario = await prisma.usuario.findUnique({ where: { email } });

Â  Â  if (!usuario) {
Â  Â  Â  return NextResponse.json(
Â  Â  Â  Â  { message: "UsuÃ¡rio nÃ£o encontrado" },
Â  Â  Â  Â  { status: 404 }
Â  Â  Â  );
Â  Â  }

Â  Â  const senhaValida = await bcrypt.compare(senha, usuario.senha_hash);
Â  Â  if (!senhaValida) {
Â  Â  Â  return NextResponse.json({ message: "Senha incorreta" }, { status: 401 });
Â  Â  }

Â  Â  const token = jwt.sign(
Â  Â  Â  { id: usuario.id, loja_id: usuario.loja_id, perfil: usuario.perfil },
Â  Â  Â  process.env.JWT_SECRET || "chave-secreta",
Â  Â  Â  { expiresIn: "8h" }
Â  Â  );

    // ðŸŽ¯ MUDANÃ‡A CRUCIAL: Crie a resposta antes de adicionar o cookie
    const response = NextResponse.json({
Â  Â  Â  // REMOVA: token, <--- O token nÃ£o vai mais no corpo!
Â  Â  Â  user: {
Â  Â  Â  Â  id: usuario.id,
Â  Â  Â  Â  nome: usuario.nome,
Â  Â  Â  Â  email: usuario.email,
Â  Â  Â  Â  perfil: usuario.perfil,
Â  Â  Â  Â  loja_id: usuario.loja_id,
Â  Â  Â  },
      message: "Login efetuado com sucesso!"
Â  Â  }, { status: 200 });
    
    // ðŸŽ¯ MUDANÃ‡A CRUCIAL: Adiciona o Cookie HTTP ao cabeÃ§alho da resposta
    // 1. token: O Middleware agora pode ler 'token'
    // 2. HttpOnly: Impede que o JS (localStorage) acesse, aumentando a seguranÃ§a.
    // 3. Path=/: Garante que o cookie seja enviado em todas as rotas.
    // 4. Max-Age: Define o tempo de expiraÃ§Ã£o em segundos (8 horas)
    const maxAge = 60 * 60 * 8; // 8 horas

    response.cookies.set('token', token, {
        httpOnly: true, // Impedir acesso via JS (seguranÃ§a)
        maxAge: maxAge,
        path: '/', // DisponÃ­vel em todo o site
        secure: process.env.NODE_ENV === 'production', // Use 'secure' em produÃ§Ã£o (HTTPS)
        sameSite: 'strict',
    });
    
    // ðŸ’¡ Opcional: Adicionar o perfil para ajudar no middleware (se precisar de redirecionamento mais esperto)
    response.cookies.set('user_perfil', usuario.perfil, {
        httpOnly: false, // Pode ser lido pelo JS do cliente, se necessÃ¡rio, mas o middleware jÃ¡ consegue ler.
        maxAge: maxAge,
        path: '/', 
        sameSite: 'strict',
    });


Â  Â  return response; // Retorna a resposta com o cookie

Â  } catch (err) {
Â  Â  console.error(err);
Â  Â  return NextResponse.json(
Â  Â  Â  { message: "Erro interno no login" },
Â  Â  Â  { status: 500 }
Â  Â  );
Â  }
}