import { verifyToken } from "@/lib/auth";
import { NextResponse } from "next/server";

export function withAuth(handler, allowedRoles = []) {
Â  return async (req) => {
Â  Â  // ðŸ›‘ CORREÃ‡ÃƒO PRINCIPAL: Ler o token do Cookie
Â  Â  const token = req.cookies.get("token")?.value;

Â  Â  // Comentado: CÃ³digo original que leria do Header, agora Ã© secundÃ¡rio ou removido.
Â  Â  // const authHeader = req.headers.get("authorization");
Â  Â  // if (!token && authHeader?.startsWith("Bearer ")) {
Â  Â  //   token = authHeader.split(" ")[1];
Â  Â  // }
    
Â  Â  if (!token) {
Â  Â  Â  // Se nÃ£o houver token no cookie, nÃ£o estÃ¡ autorizado.
Â  Â  Â  return NextResponse.json({ message: "NÃ£o autorizado. Token ausente no Cookie." }, { status: 401 });
Â  Â  }

Â  Â  // ðŸ’¡ Nota: Assumindo que `verifyToken` decodifica e verifica a expiraÃ§Ã£o.
Â  Â  const decoded = verifyToken(token);

Â  Â  if (!decoded) {
Â  Â  Â  return NextResponse.json(
Â  Â  Â  Â  { message: "Token invÃ¡lido ou expirado" },
Â  Â  Â  Â  { status: 401 }
Â  Â  Â  );
Â  Â  }

Â  Â  // VerificaÃ§Ã£o de Perfil (Role Authorization)
Â  Â  if (
Â  Â  Â  allowedRoles.length > 0 &&
Â  Â  Â  !allowedRoles.includes(decoded.perfil.toUpperCase())
Â  Â  ) {
Â  Â  Â  return NextResponse.json({ message: "Acesso negado" }, { status: 403 });
Â  Â  }

Â  Â  // âœ… Adiciona o payload decodificado na request para o handler
Â  Â  req.user = decoded;
Â  Â  return handler(req);
Â  };
}